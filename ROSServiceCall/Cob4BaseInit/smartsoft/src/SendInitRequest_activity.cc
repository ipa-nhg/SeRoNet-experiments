//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "SendInitRequest_activity.hh"
#include "Cob4BaseInit.hh"

#include <iostream>

SendInitRequest_activity::SendInitRequest_activity(SmartACE::SmartComponent *comp) 
:	SendInitRequest_activityCore(comp)
{
	std::cout << "constructor SendInitRequest_activity\n";
}
SendInitRequest_activity::~SendInitRequest_activity() 
{
	std::cout << "destructor SendInitRequest_activity\n";
}



int SendInitRequest_activity::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int SendInitRequest_activity::on_execute()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	ROSRos_core::Std_srvs_TriggerRequest ask;
	ROSRos_core::Std_srvs_TriggerResponse response;

	COMP ->triggerQueryServiceReq->query(ask, response);
	std::cout<<"Got triggerQueryServiceReq Query Answer Sucess: "<<response.getSuccess()<<std::endl;
	std::cout<<"Got triggerQueryServiceReq Query Answer Message: "<<response.getMessage()<<std::endl;
	COMP->fini();
	return 0;
}
int SendInitRequest_activity::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
