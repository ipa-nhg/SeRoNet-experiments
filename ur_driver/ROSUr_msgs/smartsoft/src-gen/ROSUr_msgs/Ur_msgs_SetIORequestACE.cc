//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSUr_msgs/Ur_msgs_SetIORequestACE.hh"
#include <ace/SString.h>

// serialization operator for element Ur_msgs_SetIORequest
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSUr_msgsIDL::Ur_msgs_SetIORequest &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element FUN_SET_DIGITAL_OUT
	good_bit = good_bit && cdr.write_char(data.FUN_SET_DIGITAL_OUT);
	// serialize list-element FUN_SET_FLAG
	good_bit = good_bit && cdr.write_char(data.FUN_SET_FLAG);
	// serialize list-element FUN_SET_ANALOG_OUT
	good_bit = good_bit && cdr.write_char(data.FUN_SET_ANALOG_OUT);
	// serialize list-element FUN_SET_TOOL_VOLTAGE
	good_bit = good_bit && cdr.write_char(data.FUN_SET_TOOL_VOLTAGE);
	// serialize list-element STATE_OFF
	good_bit = good_bit && cdr.write_char(data.STATE_OFF);
	// serialize list-element STATE_ON
	good_bit = good_bit && cdr.write_char(data.STATE_ON);
	// serialize list-element STATE_TOOL_VOLTAGE_0V
	good_bit = good_bit && cdr.write_char(data.STATE_TOOL_VOLTAGE_0V);
	// serialize list-element STATE_TOOL_VOLTAGE_12V
	good_bit = good_bit && cdr.write_char(data.STATE_TOOL_VOLTAGE_12V);
	// serialize list-element STATE_TOOL_VOLTAGE_24V
	good_bit = good_bit && cdr.write_char(data.STATE_TOOL_VOLTAGE_24V);
	// serialize list-element fun
	good_bit = good_bit && cdr.write_char(data.fun);
	// serialize list-element pin
	good_bit = good_bit && cdr.write_char(data.pin);
	// serialize list-element state
	good_bit = good_bit && cdr.write_float(data.state);
	
	return good_bit;
}

// de-serialization operator for element Ur_msgs_SetIORequest
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSUr_msgsIDL::Ur_msgs_SetIORequest &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element FUN_SET_DIGITAL_OUT
	good_bit = good_bit && cdr.read_char(data.FUN_SET_DIGITAL_OUT);
	// deserialize type element FUN_SET_FLAG
	good_bit = good_bit && cdr.read_char(data.FUN_SET_FLAG);
	// deserialize type element FUN_SET_ANALOG_OUT
	good_bit = good_bit && cdr.read_char(data.FUN_SET_ANALOG_OUT);
	// deserialize type element FUN_SET_TOOL_VOLTAGE
	good_bit = good_bit && cdr.read_char(data.FUN_SET_TOOL_VOLTAGE);
	// deserialize type element STATE_OFF
	good_bit = good_bit && cdr.read_char(data.STATE_OFF);
	// deserialize type element STATE_ON
	good_bit = good_bit && cdr.read_char(data.STATE_ON);
	// deserialize type element STATE_TOOL_VOLTAGE_0V
	good_bit = good_bit && cdr.read_char(data.STATE_TOOL_VOLTAGE_0V);
	// deserialize type element STATE_TOOL_VOLTAGE_12V
	good_bit = good_bit && cdr.read_char(data.STATE_TOOL_VOLTAGE_12V);
	// deserialize type element STATE_TOOL_VOLTAGE_24V
	good_bit = good_bit && cdr.read_char(data.STATE_TOOL_VOLTAGE_24V);
	// deserialize type element fun
	good_bit = good_bit && cdr.read_char(data.fun);
	// deserialize type element pin
	good_bit = good_bit && cdr.read_char(data.pin);
	// deserialize type element state
	good_bit = good_bit && cdr.read_float(data.state);
	
	return good_bit;
}

// serialization operator for CommunicationObject Ur_msgs_SetIORequest
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSUr_msgs::Ur_msgs_SetIORequest &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Ur_msgs_SetIORequest
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSUr_msgs::Ur_msgs_SetIORequest &obj)
{
	return cdr >> obj.set();
}
