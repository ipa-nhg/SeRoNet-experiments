//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSUr_msgs/Ur_msgs_RobotModeDataMsgCore.hh"

// serialization/deserialization operators
//#include "ROSUr_msgs/Ur_msgs_RobotModeDataMsgACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace ROSUr_msgs 
{
	const char* Ur_msgs_RobotModeDataMsgCore::getCompiledHash()
	{
		return ROSUr_msgsIDL::REPO_HASH;
	}
	
	void Ur_msgs_RobotModeDataMsgCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
	}
	
	void Ur_msgs_RobotModeDataMsgCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "Ur_msgs_RobotModeDataMsgCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
	}
	
	#ifdef ENABLE_HASH
	size_t Ur_msgs_RobotModeDataMsgCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		boost::hash_combine(seed, data.timestamp);
		boost::hash_combine(seed, data.is_robot_connected);
		boost::hash_combine(seed, data.is_real_robot_enabled);
		boost::hash_combine(seed, data.is_power_on_robot);
		boost::hash_combine(seed, data.is_emergency_stopped);
		boost::hash_combine(seed, data.is_protective_stopped);
		boost::hash_combine(seed, data.is_program_running);
		boost::hash_combine(seed, data.is_program_paused);
		
		return seed;
	}
	#endif
	
	// default constructor
	Ur_msgs_RobotModeDataMsgCore::Ur_msgs_RobotModeDataMsgCore()
	:	idl_Ur_msgs_RobotModeDataMsg()
	{  
		setTimestamp(0);
		setIs_robot_connected(false);
		setIs_real_robot_enabled(false);
		setIs_power_on_robot(false);
		setIs_emergency_stopped(false);
		setIs_protective_stopped(false);
		setIs_program_running(false);
		setIs_program_paused(false);
	}
	
	Ur_msgs_RobotModeDataMsgCore::Ur_msgs_RobotModeDataMsgCore(const DATATYPE &data)
	:	idl_Ur_msgs_RobotModeDataMsg(data)
	{  }

	Ur_msgs_RobotModeDataMsgCore::~Ur_msgs_RobotModeDataMsgCore()
	{  }
	
	void Ur_msgs_RobotModeDataMsgCore::to_ostream(std::ostream &os) const
	{
	  os << "Ur_msgs_RobotModeDataMsg(";
	  os << getTimestamp() << " ";
	  os << getIs_robot_connected() << " ";
	  os << getIs_real_robot_enabled() << " ";
	  os << getIs_power_on_robot() << " ";
	  os << getIs_emergency_stopped() << " ";
	  os << getIs_protective_stopped() << " ";
	  os << getIs_program_running() << " ";
	  os << getIs_program_paused() << " ";
	  os << ") ";
	}
	
	// convert to xml stream
	void Ur_msgs_RobotModeDataMsgCore::to_xml(std::ostream &os, const std::string &indent) const {
		os << indent << "<timestamp>" << getTimestamp() << "</timestamp>";
		os << indent << "<is_robot_connected>" << getIs_robot_connected() << "</is_robot_connected>";
		os << indent << "<is_real_robot_enabled>" << getIs_real_robot_enabled() << "</is_real_robot_enabled>";
		os << indent << "<is_power_on_robot>" << getIs_power_on_robot() << "</is_power_on_robot>";
		os << indent << "<is_emergency_stopped>" << getIs_emergency_stopped() << "</is_emergency_stopped>";
		os << indent << "<is_protective_stopped>" << getIs_protective_stopped() << "</is_protective_stopped>";
		os << indent << "<is_program_running>" << getIs_program_running() << "</is_program_running>";
		os << indent << "<is_program_paused>" << getIs_program_paused() << "</is_program_paused>";
	}
	
	// restore from xml stream
	void Ur_msgs_RobotModeDataMsgCore::from_xml(std::istream &is) {
		static const Smart::KnuthMorrisPratt kmp_timestamp("<timestamp>");
		static const Smart::KnuthMorrisPratt kmp_is_robot_connected("<is_robot_connected>");
		static const Smart::KnuthMorrisPratt kmp_is_real_robot_enabled("<is_real_robot_enabled>");
		static const Smart::KnuthMorrisPratt kmp_is_power_on_robot("<is_power_on_robot>");
		static const Smart::KnuthMorrisPratt kmp_is_emergency_stopped("<is_emergency_stopped>");
		static const Smart::KnuthMorrisPratt kmp_is_protective_stopped("<is_protective_stopped>");
		static const Smart::KnuthMorrisPratt kmp_is_program_running("<is_program_running>");
		static const Smart::KnuthMorrisPratt kmp_is_program_paused("<is_program_paused>");
		
		if(kmp_timestamp.search(is)) {
			unsigned long int timestampItem;
			is >> timestampItem;
			setTimestamp(timestampItem);
		}
		if(kmp_is_robot_connected.search(is)) {
			bool is_robot_connectedItem;
			is >> is_robot_connectedItem;
			setIs_robot_connected(is_robot_connectedItem);
		}
		if(kmp_is_real_robot_enabled.search(is)) {
			bool is_real_robot_enabledItem;
			is >> is_real_robot_enabledItem;
			setIs_real_robot_enabled(is_real_robot_enabledItem);
		}
		if(kmp_is_power_on_robot.search(is)) {
			bool is_power_on_robotItem;
			is >> is_power_on_robotItem;
			setIs_power_on_robot(is_power_on_robotItem);
		}
		if(kmp_is_emergency_stopped.search(is)) {
			bool is_emergency_stoppedItem;
			is >> is_emergency_stoppedItem;
			setIs_emergency_stopped(is_emergency_stoppedItem);
		}
		if(kmp_is_protective_stopped.search(is)) {
			bool is_protective_stoppedItem;
			is >> is_protective_stoppedItem;
			setIs_protective_stopped(is_protective_stoppedItem);
		}
		if(kmp_is_program_running.search(is)) {
			bool is_program_runningItem;
			is >> is_program_runningItem;
			setIs_program_running(is_program_runningItem);
		}
		if(kmp_is_program_paused.search(is)) {
			bool is_program_pausedItem;
			is >> is_program_pausedItem;
			setIs_program_paused(is_program_pausedItem);
		}
	}
	
	/*
	void Ur_msgs_RobotModeDataMsgCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		ROSUr_msgsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(ROSUr_msgsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see Ur_msgs_RobotModeDataMsgACE.hh)
		cdr << idl_Ur_msgs_RobotModeDataMsg;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_Ur_msgs_RobotModeDataMsg);
		cdr << data_hash;
		// std::cout << "Ur_msgs_RobotModeDataMsgCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void Ur_msgs_RobotModeDataMsgCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		ROSUr_msgsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see Ur_msgs_RobotModeDataMsgACE.hh)
		cdr >> idl_Ur_msgs_RobotModeDataMsg;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_Ur_msgs_RobotModeDataMsg);
		assert(data_hash == own_hash);
		// std::cout << "Ur_msgs_RobotModeDataMsgCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace ROSUr_msgs */
