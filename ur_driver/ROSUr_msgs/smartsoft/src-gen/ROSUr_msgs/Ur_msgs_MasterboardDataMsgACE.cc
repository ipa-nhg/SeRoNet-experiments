//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSUr_msgs/Ur_msgs_MasterboardDataMsgACE.hh"
#include <ace/SString.h>

// serialization operator for element Ur_msgs_MasterboardDataMsg
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSUr_msgsIDL::Ur_msgs_MasterboardDataMsg &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element digital_input_bits
	good_bit = good_bit && cdr.write_ulong(data.digital_input_bits);
	// serialize list-element digital_output_bits
	good_bit = good_bit && cdr.write_ulong(data.digital_output_bits);
	// serialize list-element analog_input_range0
	good_bit = good_bit && cdr.write_char(data.analog_input_range0);
	// serialize list-element analog_input_range1
	good_bit = good_bit && cdr.write_char(data.analog_input_range1);
	// serialize list-element analog_input0
	good_bit = good_bit && cdr.write_double(data.analog_input0);
	// serialize list-element analog_input1
	good_bit = good_bit && cdr.write_double(data.analog_input1);
	// serialize list-element analog_output_domain0
	good_bit = good_bit && cdr.write_char(data.analog_output_domain0);
	// serialize list-element analog_output_domain1
	good_bit = good_bit && cdr.write_char(data.analog_output_domain1);
	// serialize list-element analog_output0
	good_bit = good_bit && cdr.write_double(data.analog_output0);
	// serialize list-element analog_output1
	good_bit = good_bit && cdr.write_double(data.analog_output1);
	// serialize list-element masterboard_temperature
	good_bit = good_bit && cdr.write_float(data.masterboard_temperature);
	// serialize list-element robot_voltage_48V
	good_bit = good_bit && cdr.write_float(data.robot_voltage_48V);
	// serialize list-element robot_current
	good_bit = good_bit && cdr.write_float(data.robot_current);
	// serialize list-element master_io_current
	good_bit = good_bit && cdr.write_float(data.master_io_current);
	// serialize list-element master_safety_state
	good_bit = good_bit && cdr.write_octet(data.master_safety_state);
	// serialize list-element master_onoff_state
	good_bit = good_bit && cdr.write_octet(data.master_onoff_state);
	
	return good_bit;
}

// de-serialization operator for element Ur_msgs_MasterboardDataMsg
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSUr_msgsIDL::Ur_msgs_MasterboardDataMsg &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element digital_input_bits
	good_bit = good_bit && cdr.read_ulong(data.digital_input_bits);
	// deserialize type element digital_output_bits
	good_bit = good_bit && cdr.read_ulong(data.digital_output_bits);
	// deserialize type element analog_input_range0
	good_bit = good_bit && cdr.read_char(data.analog_input_range0);
	// deserialize type element analog_input_range1
	good_bit = good_bit && cdr.read_char(data.analog_input_range1);
	// deserialize type element analog_input0
	good_bit = good_bit && cdr.read_double(data.analog_input0);
	// deserialize type element analog_input1
	good_bit = good_bit && cdr.read_double(data.analog_input1);
	// deserialize type element analog_output_domain0
	good_bit = good_bit && cdr.read_char(data.analog_output_domain0);
	// deserialize type element analog_output_domain1
	good_bit = good_bit && cdr.read_char(data.analog_output_domain1);
	// deserialize type element analog_output0
	good_bit = good_bit && cdr.read_double(data.analog_output0);
	// deserialize type element analog_output1
	good_bit = good_bit && cdr.read_double(data.analog_output1);
	// deserialize type element masterboard_temperature
	good_bit = good_bit && cdr.read_float(data.masterboard_temperature);
	// deserialize type element robot_voltage_48V
	good_bit = good_bit && cdr.read_float(data.robot_voltage_48V);
	// deserialize type element robot_current
	good_bit = good_bit && cdr.read_float(data.robot_current);
	// deserialize type element master_io_current
	good_bit = good_bit && cdr.read_float(data.master_io_current);
	// deserialize type element master_safety_state
	good_bit = good_bit && cdr.read_octet(data.master_safety_state);
	// deserialize type element master_onoff_state
	good_bit = good_bit && cdr.read_octet(data.master_onoff_state);
	
	return good_bit;
}

// serialization operator for CommunicationObject Ur_msgs_MasterboardDataMsg
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSUr_msgs::Ur_msgs_MasterboardDataMsg &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Ur_msgs_MasterboardDataMsg
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSUr_msgs::Ur_msgs_MasterboardDataMsg &obj)
{
	return cdr >> obj.set();
}
