//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSUr_msgs/Ur_msgs_ToolDataMsgACE.hh"
#include <ace/SString.h>

// serialization operator for element Ur_msgs_ToolDataMsg
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSUr_msgsIDL::Ur_msgs_ToolDataMsg &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element analog_input_range2
	good_bit = good_bit && cdr.write_char(data.analog_input_range2);
	// serialize list-element analog_input_range3
	good_bit = good_bit && cdr.write_char(data.analog_input_range3);
	// serialize list-element analog_input2
	good_bit = good_bit && cdr.write_double(data.analog_input2);
	// serialize list-element analog_input3
	good_bit = good_bit && cdr.write_double(data.analog_input3);
	// serialize list-element tool_voltage_48v
	good_bit = good_bit && cdr.write_float(data.tool_voltage_48v);
	// serialize list-element tool_output_voltage
	good_bit = good_bit && cdr.write_octet(data.tool_output_voltage);
	// serialize list-element tool_current
	good_bit = good_bit && cdr.write_float(data.tool_current);
	// serialize list-element tool_temperature
	good_bit = good_bit && cdr.write_float(data.tool_temperature);
	// serialize list-element tool_mode
	good_bit = good_bit && cdr.write_octet(data.tool_mode);
	
	return good_bit;
}

// de-serialization operator for element Ur_msgs_ToolDataMsg
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSUr_msgsIDL::Ur_msgs_ToolDataMsg &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element analog_input_range2
	good_bit = good_bit && cdr.read_char(data.analog_input_range2);
	// deserialize type element analog_input_range3
	good_bit = good_bit && cdr.read_char(data.analog_input_range3);
	// deserialize type element analog_input2
	good_bit = good_bit && cdr.read_double(data.analog_input2);
	// deserialize type element analog_input3
	good_bit = good_bit && cdr.read_double(data.analog_input3);
	// deserialize type element tool_voltage_48v
	good_bit = good_bit && cdr.read_float(data.tool_voltage_48v);
	// deserialize type element tool_output_voltage
	good_bit = good_bit && cdr.read_octet(data.tool_output_voltage);
	// deserialize type element tool_current
	good_bit = good_bit && cdr.read_float(data.tool_current);
	// deserialize type element tool_temperature
	good_bit = good_bit && cdr.read_float(data.tool_temperature);
	// deserialize type element tool_mode
	good_bit = good_bit && cdr.read_octet(data.tool_mode);
	
	return good_bit;
}

// serialization operator for CommunicationObject Ur_msgs_ToolDataMsg
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSUr_msgs::Ur_msgs_ToolDataMsg &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Ur_msgs_ToolDataMsg
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSUr_msgs::Ur_msgs_ToolDataMsg &obj)
{
	return cdr >> obj.set();
}
