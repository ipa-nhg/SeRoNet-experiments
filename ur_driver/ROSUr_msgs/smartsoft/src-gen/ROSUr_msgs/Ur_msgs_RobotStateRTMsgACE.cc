//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSUr_msgs/Ur_msgs_RobotStateRTMsgACE.hh"
#include <ace/SString.h>

// serialization operator for element Ur_msgs_RobotStateRTMsg
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSUr_msgsIDL::Ur_msgs_RobotStateRTMsg &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element time
	good_bit = good_bit && cdr.write_double(data.time);
	// serialize list-element q_target
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.q_target.size());
	good_bit = good_bit && cdr.write_double_array(data.q_target.data(), data.q_target.size());
	// serialize list-element qd_target
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.qd_target.size());
	good_bit = good_bit && cdr.write_double_array(data.qd_target.data(), data.qd_target.size());
	// serialize list-element qdd_target
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.qdd_target.size());
	good_bit = good_bit && cdr.write_double_array(data.qdd_target.data(), data.qdd_target.size());
	// serialize list-element i_target
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.i_target.size());
	good_bit = good_bit && cdr.write_double_array(data.i_target.data(), data.i_target.size());
	// serialize list-element m_target
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.m_target.size());
	good_bit = good_bit && cdr.write_double_array(data.m_target.data(), data.m_target.size());
	// serialize list-element q_actual
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.q_actual.size());
	good_bit = good_bit && cdr.write_double_array(data.q_actual.data(), data.q_actual.size());
	// serialize list-element qd_actual
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.qd_actual.size());
	good_bit = good_bit && cdr.write_double_array(data.qd_actual.data(), data.qd_actual.size());
	// serialize list-element i_actual
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.i_actual.size());
	good_bit = good_bit && cdr.write_double_array(data.i_actual.data(), data.i_actual.size());
	// serialize list-element tool_acc_values
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.tool_acc_values.size());
	good_bit = good_bit && cdr.write_double_array(data.tool_acc_values.data(), data.tool_acc_values.size());
	// serialize list-element tcp_force
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.tcp_force.size());
	good_bit = good_bit && cdr.write_double_array(data.tcp_force.data(), data.tcp_force.size());
	// serialize list-element tool_vector
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.tool_vector.size());
	good_bit = good_bit && cdr.write_double_array(data.tool_vector.data(), data.tool_vector.size());
	// serialize list-element tcp_speed
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.tcp_speed.size());
	good_bit = good_bit && cdr.write_double_array(data.tcp_speed.data(), data.tcp_speed.size());
	// serialize list-element digital_input_bits
	good_bit = good_bit && cdr.write_double(data.digital_input_bits);
	// serialize list-element motor_temperatures
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.motor_temperatures.size());
	good_bit = good_bit && cdr.write_double_array(data.motor_temperatures.data(), data.motor_temperatures.size());
	// serialize list-element controller_timer
	good_bit = good_bit && cdr.write_double(data.controller_timer);
	// serialize list-element test_value
	good_bit = good_bit && cdr.write_double(data.test_value);
	// serialize list-element robot_mode
	good_bit = good_bit && cdr.write_double(data.robot_mode);
	// serialize list-element joint_modes
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.joint_modes.size());
	good_bit = good_bit && cdr.write_double_array(data.joint_modes.data(), data.joint_modes.size());
	
	return good_bit;
}

// de-serialization operator for element Ur_msgs_RobotStateRTMsg
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSUr_msgsIDL::Ur_msgs_RobotStateRTMsg &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element time
	good_bit = good_bit && cdr.read_double(data.time);
	// deserialize list-type element q_target
	ACE_CDR::ULong data_q_targetNbr;
	good_bit = good_bit && cdr >> data_q_targetNbr;
	data.q_target.resize(data_q_targetNbr);
	good_bit = good_bit && cdr.read_double_array(data.q_target.data(), data_q_targetNbr);
	// deserialize list-type element qd_target
	ACE_CDR::ULong data_qd_targetNbr;
	good_bit = good_bit && cdr >> data_qd_targetNbr;
	data.qd_target.resize(data_qd_targetNbr);
	good_bit = good_bit && cdr.read_double_array(data.qd_target.data(), data_qd_targetNbr);
	// deserialize list-type element qdd_target
	ACE_CDR::ULong data_qdd_targetNbr;
	good_bit = good_bit && cdr >> data_qdd_targetNbr;
	data.qdd_target.resize(data_qdd_targetNbr);
	good_bit = good_bit && cdr.read_double_array(data.qdd_target.data(), data_qdd_targetNbr);
	// deserialize list-type element i_target
	ACE_CDR::ULong data_i_targetNbr;
	good_bit = good_bit && cdr >> data_i_targetNbr;
	data.i_target.resize(data_i_targetNbr);
	good_bit = good_bit && cdr.read_double_array(data.i_target.data(), data_i_targetNbr);
	// deserialize list-type element m_target
	ACE_CDR::ULong data_m_targetNbr;
	good_bit = good_bit && cdr >> data_m_targetNbr;
	data.m_target.resize(data_m_targetNbr);
	good_bit = good_bit && cdr.read_double_array(data.m_target.data(), data_m_targetNbr);
	// deserialize list-type element q_actual
	ACE_CDR::ULong data_q_actualNbr;
	good_bit = good_bit && cdr >> data_q_actualNbr;
	data.q_actual.resize(data_q_actualNbr);
	good_bit = good_bit && cdr.read_double_array(data.q_actual.data(), data_q_actualNbr);
	// deserialize list-type element qd_actual
	ACE_CDR::ULong data_qd_actualNbr;
	good_bit = good_bit && cdr >> data_qd_actualNbr;
	data.qd_actual.resize(data_qd_actualNbr);
	good_bit = good_bit && cdr.read_double_array(data.qd_actual.data(), data_qd_actualNbr);
	// deserialize list-type element i_actual
	ACE_CDR::ULong data_i_actualNbr;
	good_bit = good_bit && cdr >> data_i_actualNbr;
	data.i_actual.resize(data_i_actualNbr);
	good_bit = good_bit && cdr.read_double_array(data.i_actual.data(), data_i_actualNbr);
	// deserialize list-type element tool_acc_values
	ACE_CDR::ULong data_tool_acc_valuesNbr;
	good_bit = good_bit && cdr >> data_tool_acc_valuesNbr;
	data.tool_acc_values.resize(data_tool_acc_valuesNbr);
	good_bit = good_bit && cdr.read_double_array(data.tool_acc_values.data(), data_tool_acc_valuesNbr);
	// deserialize list-type element tcp_force
	ACE_CDR::ULong data_tcp_forceNbr;
	good_bit = good_bit && cdr >> data_tcp_forceNbr;
	data.tcp_force.resize(data_tcp_forceNbr);
	good_bit = good_bit && cdr.read_double_array(data.tcp_force.data(), data_tcp_forceNbr);
	// deserialize list-type element tool_vector
	ACE_CDR::ULong data_tool_vectorNbr;
	good_bit = good_bit && cdr >> data_tool_vectorNbr;
	data.tool_vector.resize(data_tool_vectorNbr);
	good_bit = good_bit && cdr.read_double_array(data.tool_vector.data(), data_tool_vectorNbr);
	// deserialize list-type element tcp_speed
	ACE_CDR::ULong data_tcp_speedNbr;
	good_bit = good_bit && cdr >> data_tcp_speedNbr;
	data.tcp_speed.resize(data_tcp_speedNbr);
	good_bit = good_bit && cdr.read_double_array(data.tcp_speed.data(), data_tcp_speedNbr);
	// deserialize type element digital_input_bits
	good_bit = good_bit && cdr.read_double(data.digital_input_bits);
	// deserialize list-type element motor_temperatures
	ACE_CDR::ULong data_motor_temperaturesNbr;
	good_bit = good_bit && cdr >> data_motor_temperaturesNbr;
	data.motor_temperatures.resize(data_motor_temperaturesNbr);
	good_bit = good_bit && cdr.read_double_array(data.motor_temperatures.data(), data_motor_temperaturesNbr);
	// deserialize type element controller_timer
	good_bit = good_bit && cdr.read_double(data.controller_timer);
	// deserialize type element test_value
	good_bit = good_bit && cdr.read_double(data.test_value);
	// deserialize type element robot_mode
	good_bit = good_bit && cdr.read_double(data.robot_mode);
	// deserialize list-type element joint_modes
	ACE_CDR::ULong data_joint_modesNbr;
	good_bit = good_bit && cdr >> data_joint_modesNbr;
	data.joint_modes.resize(data_joint_modesNbr);
	good_bit = good_bit && cdr.read_double_array(data.joint_modes.data(), data_joint_modesNbr);
	
	return good_bit;
}

// serialization operator for CommunicationObject Ur_msgs_RobotStateRTMsg
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSUr_msgs::Ur_msgs_RobotStateRTMsg &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Ur_msgs_RobotStateRTMsg
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSUr_msgs::Ur_msgs_RobotStateRTMsg &obj)
{
	return cdr >> obj.set();
}
