//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSUr_msgs/Ur_msgs_IOStatesCore.hh"

// serialization/deserialization operators
//#include "ROSUr_msgs/Ur_msgs_IOStatesACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace ROSUr_msgs 
{
	const char* Ur_msgs_IOStatesCore::getCompiledHash()
	{
		return ROSUr_msgsIDL::REPO_HASH;
	}
	
	void Ur_msgs_IOStatesCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for ROSUr_msgs::Ur_msgs_Digital(idl_Ur_msgs_IOStates.digital_in_states)
		ROSUr_msgs::Ur_msgs_Digital::getAllHashValues(hashes);
		// get hash value(s) for ROSUr_msgs::Ur_msgs_Digital(idl_Ur_msgs_IOStates.digital_out_states)
		ROSUr_msgs::Ur_msgs_Digital::getAllHashValues(hashes);
		// get hash value(s) for ROSUr_msgs::Ur_msgs_Digital(idl_Ur_msgs_IOStates.flag_states)
		ROSUr_msgs::Ur_msgs_Digital::getAllHashValues(hashes);
		// get hash value(s) for ROSUr_msgs::Ur_msgs_Analog(idl_Ur_msgs_IOStates.analog_in_states)
		ROSUr_msgs::Ur_msgs_Analog::getAllHashValues(hashes);
		// get hash value(s) for ROSUr_msgs::Ur_msgs_Analog(idl_Ur_msgs_IOStates.analog_out_states)
		ROSUr_msgs::Ur_msgs_Analog::getAllHashValues(hashes);
	}
	
	void Ur_msgs_IOStatesCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "Ur_msgs_IOStatesCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for ROSUr_msgs::Ur_msgs_Digital(idl_Ur_msgs_IOStates.digital_in_states)
		ROSUr_msgs::Ur_msgs_Digital::checkAllHashValues(hashes);
		// check hash value(s) for ROSUr_msgs::Ur_msgs_Digital(idl_Ur_msgs_IOStates.digital_out_states)
		ROSUr_msgs::Ur_msgs_Digital::checkAllHashValues(hashes);
		// check hash value(s) for ROSUr_msgs::Ur_msgs_Digital(idl_Ur_msgs_IOStates.flag_states)
		ROSUr_msgs::Ur_msgs_Digital::checkAllHashValues(hashes);
		// check hash value(s) for ROSUr_msgs::Ur_msgs_Analog(idl_Ur_msgs_IOStates.analog_in_states)
		ROSUr_msgs::Ur_msgs_Analog::checkAllHashValues(hashes);
		// check hash value(s) for ROSUr_msgs::Ur_msgs_Analog(idl_Ur_msgs_IOStates.analog_out_states)
		ROSUr_msgs::Ur_msgs_Analog::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t Ur_msgs_IOStatesCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		std::vector<ROSUr_msgsIDL::Ur_msgs_Digital>::const_iterator data_digital_in_statesIt;
		for(data_digital_in_statesIt=data.digital_in_states.begin(); data_digital_in_statesIt!=data.digital_in_states.end(); data_digital_in_statesIt++) {
			seed += ROSUr_msgs::Ur_msgs_Digital::generateDataHash(*data_digital_in_statesIt);
		}
		std::vector<ROSUr_msgsIDL::Ur_msgs_Digital>::const_iterator data_digital_out_statesIt;
		for(data_digital_out_statesIt=data.digital_out_states.begin(); data_digital_out_statesIt!=data.digital_out_states.end(); data_digital_out_statesIt++) {
			seed += ROSUr_msgs::Ur_msgs_Digital::generateDataHash(*data_digital_out_statesIt);
		}
		std::vector<ROSUr_msgsIDL::Ur_msgs_Digital>::const_iterator data_flag_statesIt;
		for(data_flag_statesIt=data.flag_states.begin(); data_flag_statesIt!=data.flag_states.end(); data_flag_statesIt++) {
			seed += ROSUr_msgs::Ur_msgs_Digital::generateDataHash(*data_flag_statesIt);
		}
		std::vector<ROSUr_msgsIDL::Ur_msgs_Analog>::const_iterator data_analog_in_statesIt;
		for(data_analog_in_statesIt=data.analog_in_states.begin(); data_analog_in_statesIt!=data.analog_in_states.end(); data_analog_in_statesIt++) {
			seed += ROSUr_msgs::Ur_msgs_Analog::generateDataHash(*data_analog_in_statesIt);
		}
		std::vector<ROSUr_msgsIDL::Ur_msgs_Analog>::const_iterator data_analog_out_statesIt;
		for(data_analog_out_statesIt=data.analog_out_states.begin(); data_analog_out_statesIt!=data.analog_out_states.end(); data_analog_out_statesIt++) {
			seed += ROSUr_msgs::Ur_msgs_Analog::generateDataHash(*data_analog_out_statesIt);
		}
		
		return seed;
	}
	#endif
	
	// default constructor
	Ur_msgs_IOStatesCore::Ur_msgs_IOStatesCore()
	:	idl_Ur_msgs_IOStates()
	{  
		setDigital_in_states(std::vector<ROSUr_msgs::Ur_msgs_Digital>());
		setDigital_out_states(std::vector<ROSUr_msgs::Ur_msgs_Digital>());
		setFlag_states(std::vector<ROSUr_msgs::Ur_msgs_Digital>());
		setAnalog_in_states(std::vector<ROSUr_msgs::Ur_msgs_Analog>());
		setAnalog_out_states(std::vector<ROSUr_msgs::Ur_msgs_Analog>());
	}
	
	Ur_msgs_IOStatesCore::Ur_msgs_IOStatesCore(const DATATYPE &data)
	:	idl_Ur_msgs_IOStates(data)
	{  }

	Ur_msgs_IOStatesCore::~Ur_msgs_IOStatesCore()
	{  }
	
	void Ur_msgs_IOStatesCore::to_ostream(std::ostream &os) const
	{
	  os << "Ur_msgs_IOStates(";
	  std::vector<ROSUr_msgs::Ur_msgs_Digital>::const_iterator digital_in_statesIt;
	  std::vector<ROSUr_msgs::Ur_msgs_Digital> digital_in_statesList = getDigital_in_statesCopy();
	  for(digital_in_statesIt=digital_in_statesList.begin(); digital_in_statesIt!=digital_in_statesList.end(); digital_in_statesIt++) {
	  	digital_in_statesIt->to_ostream(os);
	  }
	  std::vector<ROSUr_msgs::Ur_msgs_Digital>::const_iterator digital_out_statesIt;
	  std::vector<ROSUr_msgs::Ur_msgs_Digital> digital_out_statesList = getDigital_out_statesCopy();
	  for(digital_out_statesIt=digital_out_statesList.begin(); digital_out_statesIt!=digital_out_statesList.end(); digital_out_statesIt++) {
	  	digital_out_statesIt->to_ostream(os);
	  }
	  std::vector<ROSUr_msgs::Ur_msgs_Digital>::const_iterator flag_statesIt;
	  std::vector<ROSUr_msgs::Ur_msgs_Digital> flag_statesList = getFlag_statesCopy();
	  for(flag_statesIt=flag_statesList.begin(); flag_statesIt!=flag_statesList.end(); flag_statesIt++) {
	  	flag_statesIt->to_ostream(os);
	  }
	  std::vector<ROSUr_msgs::Ur_msgs_Analog>::const_iterator analog_in_statesIt;
	  std::vector<ROSUr_msgs::Ur_msgs_Analog> analog_in_statesList = getAnalog_in_statesCopy();
	  for(analog_in_statesIt=analog_in_statesList.begin(); analog_in_statesIt!=analog_in_statesList.end(); analog_in_statesIt++) {
	  	analog_in_statesIt->to_ostream(os);
	  }
	  std::vector<ROSUr_msgs::Ur_msgs_Analog>::const_iterator analog_out_statesIt;
	  std::vector<ROSUr_msgs::Ur_msgs_Analog> analog_out_statesList = getAnalog_out_statesCopy();
	  for(analog_out_statesIt=analog_out_statesList.begin(); analog_out_statesIt!=analog_out_statesList.end(); analog_out_statesIt++) {
	  	analog_out_statesIt->to_ostream(os);
	  }
	  os << ") ";
	}
	
	// convert to xml stream
	void Ur_msgs_IOStatesCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		std::vector<ROSUr_msgs::Ur_msgs_Digital>::const_iterator digital_in_statesIt;
		std::vector<ROSUr_msgs::Ur_msgs_Digital> digital_in_statesList = getDigital_in_statesCopy();
		counter = 0;
		os << indent << "<digital_in_statesList n=\"" << digital_in_statesList.size() << "\">";
		for(digital_in_statesIt=digital_in_statesList.begin(); digital_in_statesIt!=digital_in_statesList.end(); digital_in_statesIt++) {
			os << indent << "<digital_in_states i=\"" << counter++ << "\">";
			digital_in_statesIt->to_xml(os, indent);
			os << indent << "</digital_in_states>";
		}
		os << indent << "</digital_in_statesList>";
		std::vector<ROSUr_msgs::Ur_msgs_Digital>::const_iterator digital_out_statesIt;
		std::vector<ROSUr_msgs::Ur_msgs_Digital> digital_out_statesList = getDigital_out_statesCopy();
		counter = 0;
		os << indent << "<digital_out_statesList n=\"" << digital_out_statesList.size() << "\">";
		for(digital_out_statesIt=digital_out_statesList.begin(); digital_out_statesIt!=digital_out_statesList.end(); digital_out_statesIt++) {
			os << indent << "<digital_out_states i=\"" << counter++ << "\">";
			digital_out_statesIt->to_xml(os, indent);
			os << indent << "</digital_out_states>";
		}
		os << indent << "</digital_out_statesList>";
		std::vector<ROSUr_msgs::Ur_msgs_Digital>::const_iterator flag_statesIt;
		std::vector<ROSUr_msgs::Ur_msgs_Digital> flag_statesList = getFlag_statesCopy();
		counter = 0;
		os << indent << "<flag_statesList n=\"" << flag_statesList.size() << "\">";
		for(flag_statesIt=flag_statesList.begin(); flag_statesIt!=flag_statesList.end(); flag_statesIt++) {
			os << indent << "<flag_states i=\"" << counter++ << "\">";
			flag_statesIt->to_xml(os, indent);
			os << indent << "</flag_states>";
		}
		os << indent << "</flag_statesList>";
		std::vector<ROSUr_msgs::Ur_msgs_Analog>::const_iterator analog_in_statesIt;
		std::vector<ROSUr_msgs::Ur_msgs_Analog> analog_in_statesList = getAnalog_in_statesCopy();
		counter = 0;
		os << indent << "<analog_in_statesList n=\"" << analog_in_statesList.size() << "\">";
		for(analog_in_statesIt=analog_in_statesList.begin(); analog_in_statesIt!=analog_in_statesList.end(); analog_in_statesIt++) {
			os << indent << "<analog_in_states i=\"" << counter++ << "\">";
			analog_in_statesIt->to_xml(os, indent);
			os << indent << "</analog_in_states>";
		}
		os << indent << "</analog_in_statesList>";
		std::vector<ROSUr_msgs::Ur_msgs_Analog>::const_iterator analog_out_statesIt;
		std::vector<ROSUr_msgs::Ur_msgs_Analog> analog_out_statesList = getAnalog_out_statesCopy();
		counter = 0;
		os << indent << "<analog_out_statesList n=\"" << analog_out_statesList.size() << "\">";
		for(analog_out_statesIt=analog_out_statesList.begin(); analog_out_statesIt!=analog_out_statesList.end(); analog_out_statesIt++) {
			os << indent << "<analog_out_states i=\"" << counter++ << "\">";
			analog_out_statesIt->to_xml(os, indent);
			os << indent << "</analog_out_states>";
		}
		os << indent << "</analog_out_statesList>";
	}
	
	// restore from xml stream
	void Ur_msgs_IOStatesCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_digital_in_statesList("<digital_in_statesList n=\"");
		static const Smart::KnuthMorrisPratt kmp_digital_in_states("\">");
		static const Smart::KnuthMorrisPratt kmp_digital_out_statesList("<digital_out_statesList n=\"");
		static const Smart::KnuthMorrisPratt kmp_digital_out_states("\">");
		static const Smart::KnuthMorrisPratt kmp_flag_statesList("<flag_statesList n=\"");
		static const Smart::KnuthMorrisPratt kmp_flag_states("\">");
		static const Smart::KnuthMorrisPratt kmp_analog_in_statesList("<analog_in_statesList n=\"");
		static const Smart::KnuthMorrisPratt kmp_analog_in_states("\">");
		static const Smart::KnuthMorrisPratt kmp_analog_out_statesList("<analog_out_statesList n=\"");
		static const Smart::KnuthMorrisPratt kmp_analog_out_states("\">");
		
		if(kmp_digital_in_statesList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			ROSUr_msgs::Ur_msgs_Digital digital_in_statesItem;
			std::vector<ROSUr_msgs::Ur_msgs_Digital> digital_in_statesList;
			kmp_digital_in_states.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_digital_in_states.search(is)) {
					digital_in_statesItem.from_xml(is);
					digital_in_statesList.push_back(digital_in_statesItem);
				}
			}
			setDigital_in_states(digital_in_statesList);
		}
		if(kmp_digital_out_statesList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			ROSUr_msgs::Ur_msgs_Digital digital_out_statesItem;
			std::vector<ROSUr_msgs::Ur_msgs_Digital> digital_out_statesList;
			kmp_digital_out_states.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_digital_out_states.search(is)) {
					digital_out_statesItem.from_xml(is);
					digital_out_statesList.push_back(digital_out_statesItem);
				}
			}
			setDigital_out_states(digital_out_statesList);
		}
		if(kmp_flag_statesList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			ROSUr_msgs::Ur_msgs_Digital flag_statesItem;
			std::vector<ROSUr_msgs::Ur_msgs_Digital> flag_statesList;
			kmp_flag_states.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_flag_states.search(is)) {
					flag_statesItem.from_xml(is);
					flag_statesList.push_back(flag_statesItem);
				}
			}
			setFlag_states(flag_statesList);
		}
		if(kmp_analog_in_statesList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			ROSUr_msgs::Ur_msgs_Analog analog_in_statesItem;
			std::vector<ROSUr_msgs::Ur_msgs_Analog> analog_in_statesList;
			kmp_analog_in_states.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_analog_in_states.search(is)) {
					analog_in_statesItem.from_xml(is);
					analog_in_statesList.push_back(analog_in_statesItem);
				}
			}
			setAnalog_in_states(analog_in_statesList);
		}
		if(kmp_analog_out_statesList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			ROSUr_msgs::Ur_msgs_Analog analog_out_statesItem;
			std::vector<ROSUr_msgs::Ur_msgs_Analog> analog_out_statesList;
			kmp_analog_out_states.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_analog_out_states.search(is)) {
					analog_out_statesItem.from_xml(is);
					analog_out_statesList.push_back(analog_out_statesItem);
				}
			}
			setAnalog_out_states(analog_out_statesList);
		}
	}
	
	/*
	void Ur_msgs_IOStatesCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		ROSUr_msgsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(ROSUr_msgsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see Ur_msgs_IOStatesACE.hh)
		cdr << idl_Ur_msgs_IOStates;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_Ur_msgs_IOStates);
		cdr << data_hash;
		// std::cout << "Ur_msgs_IOStatesCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void Ur_msgs_IOStatesCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		ROSUr_msgsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see Ur_msgs_IOStatesACE.hh)
		cdr >> idl_Ur_msgs_IOStates;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_Ur_msgs_IOStates);
		assert(data_hash == own_hash);
		// std::cout << "Ur_msgs_IOStatesCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace ROSUr_msgs */
