//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSUR_MSGS_UR_MSGS_MASTERBOARDDATAMSG_CORE_H_
#define ROSUR_MSGS_UR_MSGS_MASTERBOARDDATAMSG_CORE_H_

#include "ROSUr_msgs/Ur_msgs_MasterboardDataMsgData.hh"

#include <iostream>
#include <string>
#include <list>

namespace ROSUr_msgs {
	
class Ur_msgs_MasterboardDataMsgCore {
protected:
	// data structure
	ROSUr_msgsIDL::Ur_msgs_MasterboardDataMsg idl_Ur_msgs_MasterboardDataMsg;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef ROSUr_msgsIDL::Ur_msgs_MasterboardDataMsg DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	Ur_msgs_MasterboardDataMsgCore();
	Ur_msgs_MasterboardDataMsgCore(const DATATYPE &data);
	// default destructor
	virtual ~Ur_msgs_MasterboardDataMsgCore();
	
	const DATATYPE& get() const { return idl_Ur_msgs_MasterboardDataMsg; }
	operator const DATATYPE&() const { return idl_Ur_msgs_MasterboardDataMsg; }
	DATATYPE& set() { return idl_Ur_msgs_MasterboardDataMsg; }

	static inline std::string identifier(void) { return "ROSUr_msgs::Ur_msgs_MasterboardDataMsg"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Digital_input_bits
	inline unsigned int getDigital_input_bits() const { return idl_Ur_msgs_MasterboardDataMsg.digital_input_bits; }
	inline Ur_msgs_MasterboardDataMsgCore& setDigital_input_bits(const unsigned int &digital_input_bits) { idl_Ur_msgs_MasterboardDataMsg.digital_input_bits = digital_input_bits; return *this; }
	
	// getter and setter for element Digital_output_bits
	inline unsigned int getDigital_output_bits() const { return idl_Ur_msgs_MasterboardDataMsg.digital_output_bits; }
	inline Ur_msgs_MasterboardDataMsgCore& setDigital_output_bits(const unsigned int &digital_output_bits) { idl_Ur_msgs_MasterboardDataMsg.digital_output_bits = digital_output_bits; return *this; }
	
	// getter and setter for element Analog_input_range0
	inline char getAnalog_input_range0() const { return idl_Ur_msgs_MasterboardDataMsg.analog_input_range0; }
	inline Ur_msgs_MasterboardDataMsgCore& setAnalog_input_range0(const char &analog_input_range0) { idl_Ur_msgs_MasterboardDataMsg.analog_input_range0 = analog_input_range0; return *this; }
	
	// getter and setter for element Analog_input_range1
	inline char getAnalog_input_range1() const { return idl_Ur_msgs_MasterboardDataMsg.analog_input_range1; }
	inline Ur_msgs_MasterboardDataMsgCore& setAnalog_input_range1(const char &analog_input_range1) { idl_Ur_msgs_MasterboardDataMsg.analog_input_range1 = analog_input_range1; return *this; }
	
	// getter and setter for element Analog_input0
	inline double getAnalog_input0() const { return idl_Ur_msgs_MasterboardDataMsg.analog_input0; }
	inline Ur_msgs_MasterboardDataMsgCore& setAnalog_input0(const double &analog_input0) { idl_Ur_msgs_MasterboardDataMsg.analog_input0 = analog_input0; return *this; }
	
	// getter and setter for element Analog_input1
	inline double getAnalog_input1() const { return idl_Ur_msgs_MasterboardDataMsg.analog_input1; }
	inline Ur_msgs_MasterboardDataMsgCore& setAnalog_input1(const double &analog_input1) { idl_Ur_msgs_MasterboardDataMsg.analog_input1 = analog_input1; return *this; }
	
	// getter and setter for element Analog_output_domain0
	inline char getAnalog_output_domain0() const { return idl_Ur_msgs_MasterboardDataMsg.analog_output_domain0; }
	inline Ur_msgs_MasterboardDataMsgCore& setAnalog_output_domain0(const char &analog_output_domain0) { idl_Ur_msgs_MasterboardDataMsg.analog_output_domain0 = analog_output_domain0; return *this; }
	
	// getter and setter for element Analog_output_domain1
	inline char getAnalog_output_domain1() const { return idl_Ur_msgs_MasterboardDataMsg.analog_output_domain1; }
	inline Ur_msgs_MasterboardDataMsgCore& setAnalog_output_domain1(const char &analog_output_domain1) { idl_Ur_msgs_MasterboardDataMsg.analog_output_domain1 = analog_output_domain1; return *this; }
	
	// getter and setter for element Analog_output0
	inline double getAnalog_output0() const { return idl_Ur_msgs_MasterboardDataMsg.analog_output0; }
	inline Ur_msgs_MasterboardDataMsgCore& setAnalog_output0(const double &analog_output0) { idl_Ur_msgs_MasterboardDataMsg.analog_output0 = analog_output0; return *this; }
	
	// getter and setter for element Analog_output1
	inline double getAnalog_output1() const { return idl_Ur_msgs_MasterboardDataMsg.analog_output1; }
	inline Ur_msgs_MasterboardDataMsgCore& setAnalog_output1(const double &analog_output1) { idl_Ur_msgs_MasterboardDataMsg.analog_output1 = analog_output1; return *this; }
	
	// getter and setter for element Masterboard_temperature
	inline float getMasterboard_temperature() const { return idl_Ur_msgs_MasterboardDataMsg.masterboard_temperature; }
	inline Ur_msgs_MasterboardDataMsgCore& setMasterboard_temperature(const float &masterboard_temperature) { idl_Ur_msgs_MasterboardDataMsg.masterboard_temperature = masterboard_temperature; return *this; }
	
	// getter and setter for element Robot_voltage_48V
	inline float getRobot_voltage_48V() const { return idl_Ur_msgs_MasterboardDataMsg.robot_voltage_48V; }
	inline Ur_msgs_MasterboardDataMsgCore& setRobot_voltage_48V(const float &robot_voltage_48V) { idl_Ur_msgs_MasterboardDataMsg.robot_voltage_48V = robot_voltage_48V; return *this; }
	
	// getter and setter for element Robot_current
	inline float getRobot_current() const { return idl_Ur_msgs_MasterboardDataMsg.robot_current; }
	inline Ur_msgs_MasterboardDataMsgCore& setRobot_current(const float &robot_current) { idl_Ur_msgs_MasterboardDataMsg.robot_current = robot_current; return *this; }
	
	// getter and setter for element Master_io_current
	inline float getMaster_io_current() const { return idl_Ur_msgs_MasterboardDataMsg.master_io_current; }
	inline Ur_msgs_MasterboardDataMsgCore& setMaster_io_current(const float &master_io_current) { idl_Ur_msgs_MasterboardDataMsg.master_io_current = master_io_current; return *this; }
	
	// getter and setter for element Master_safety_state
	inline unsigned char getMaster_safety_state() const { return idl_Ur_msgs_MasterboardDataMsg.master_safety_state; }
	inline Ur_msgs_MasterboardDataMsgCore& setMaster_safety_state(const unsigned char &master_safety_state) { idl_Ur_msgs_MasterboardDataMsg.master_safety_state = master_safety_state; return *this; }
	
	// getter and setter for element Master_onoff_state
	inline unsigned char getMaster_onoff_state() const { return idl_Ur_msgs_MasterboardDataMsg.master_onoff_state; }
	inline Ur_msgs_MasterboardDataMsgCore& setMaster_onoff_state(const unsigned char &master_onoff_state) { idl_Ur_msgs_MasterboardDataMsg.master_onoff_state = master_onoff_state; return *this; }
};

} /* namespace ROSUr_msgs */
#endif /* ROSUR_MSGS_UR_MSGS_MASTERBOARDDATAMSG_CORE_H_ */
