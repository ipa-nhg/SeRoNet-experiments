//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSUR_MSGS_UR_MSGS_ROBOTSTATERTMSG_H_
#define ROSUR_MSGS_UR_MSGS_ROBOTSTATERTMSG_H_

#include "ROSUr_msgs/Ur_msgs_RobotStateRTMsgCore.hh"

namespace ROSUr_msgs {
		
class Ur_msgs_RobotStateRTMsg : public Ur_msgs_RobotStateRTMsgCore {
	public:
		// default constructors
		Ur_msgs_RobotStateRTMsg();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// Ur_msgs_RobotStateRTMsg(const double &time, const std::vector<double> &q_target, const std::vector<double> &qd_target, const std::vector<double> &qdd_target, const std::vector<double> &i_target, const std::vector<double> &m_target, const std::vector<double> &q_actual, const std::vector<double> &qd_actual, const std::vector<double> &i_actual, const std::vector<double> &tool_acc_values, const std::vector<double> &tcp_force, const std::vector<double> &tool_vector, const std::vector<double> &tcp_speed, const double &digital_input_bits, const std::vector<double> &motor_temperatures, const double &controller_timer, const double &test_value, const double &robot_mode, const std::vector<double> &joint_modes);
		
		Ur_msgs_RobotStateRTMsg(const Ur_msgs_RobotStateRTMsgCore &ur_msgs_RobotStateRTMsg);
		Ur_msgs_RobotStateRTMsg(const DATATYPE &ur_msgs_RobotStateRTMsg);
		virtual ~Ur_msgs_RobotStateRTMsg();
		
		// use framework specific getter and setter methods from core (base) class
		using Ur_msgs_RobotStateRTMsgCore::get;
		using Ur_msgs_RobotStateRTMsgCore::set;
		
		//
		// feel free to add customized methods here
		//
};

inline std::ostream &operator<<(std::ostream &os, const Ur_msgs_RobotStateRTMsg &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace ROSUr_msgs */
#endif /* ROSUR_MSGS_UR_MSGS_ROBOTSTATERTMSG_H_ */
